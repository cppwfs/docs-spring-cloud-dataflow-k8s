---
title: Configuring Multiple Platforms Support for Spring Cloud Data Flow for Kubernetes
owner: Spring Cloud Data Flow Release Engineering
---

This topic describes how to configure Multiple Platforms Support for Spring Cloud Data Flow for Kubernetes.

## <a id='Multiple Platforms'></a> Multiple Platforms

Data Flow supports deploying streaming and batch appplications to differenet Kubernetes namespaces or clusters.
You can read more about the scenarios where this approach is useful in the Spring Cloud Data Flow Referenece Documentation section on the [Role of Multiple Platform Deployments](https://dataflow.spring.io/docs/recipes/multi-platform-deployment/multiple-platform-accounts/#role-of-multiple-platform-deployments).

Task applications are deployed by the Data Flow server, and streaming applications are deployed through the Skipper server.

The section in Data Flow's `application.yaml` configuration file that you need to modify to configure one or more deployment platforms is under the section `spring.cloud.dataflow.task.platform.kubernetes.accounts`.
The `accounts` element is a map that contains the account name as a key, and the value are the properties of the Java object [KubernetesDeployerProperties](https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/blob/master/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesDeployerProperties.java).
The [Data Flow Reference Documentation section for Kubernetes Deployer Properties](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#configuration-kubernetes-deployer) contains the list of properties and their descriptions.

The following is an example of havings two accounts. One is a `default` account that targets the `default` namespace with a memory limit of 1024Mi and a `highmemory` account that targets the `highmemory-namespace` namespace with a memory limit of 4096Mi.

```
spring:
  cloud:
    dataflow:
      task:
        platform:
          kubernetes:
            accounts:
              default:
                namespace: default
                limits:
                  memory: 1024Mi
              highmemory:
                namespace: highmemory-namespace
                limits:
                  memory: 4096Mi
```
The Fabric8 Kubernetes client library is used to connect to Kubernetes.
`KubernetesDeployerProperties` contains a property named `fabric8` that exposes the [Fabric8 client configuration properties](https://github.com/fabric8io/kubernetes-client#configuring-the-client), which lets you configure connection properties, such as kubernetes master location and and certificates.

The following example shows a configuration that has an account where another cluster is referenced that contains GPU resources:

```
spring:
  cloud:
    dataflow:
      task:
        platform:
          kubernetes:
            accounts:
              default:
                namespace: default
                limits:
                  memory: 1024Mi
              gpuzone:
                fabric8:
                  masterUrl: <k8s-master-api-url>
                  namespace: gpuzone-namespace
                  trustCerts: true
```

For stream applications the configuration is similar but is done in the `spring.cloud.dataflow.stream.platform.kubernetes.accounts` section of the Skipper server's `application.yaml` file.

In the following example, two accounts are created that reference a default namespace and a namespace where a Kafka Broker is available.
By setting the environment variables at the account level, all Spring Cloud Stream applications deployed to the `kafkazone` are configured to use the Kafka Broker made available in that namespace.

```
spring:
  cloud:
    skipper:
      server:
        platform:
          kubernetes:
            accounts:
              default:
                namespace: default
                limits:
                  memory: 1024Mi
                  cpu: 500m
                readinessProbeDelay: 120
                livenessProbeDelay: 90
              kafkazone:
                namespace: kafka-namespace
                environmentVariables: 'SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=${KAFKA_SERVICE_HOST}:${KAFKA_SERVICE_PORT},SPRING_CLOUD_STREAM_KAFKA_BINDER_ZK_NODES=${KAFKA_ZOOKEEPER_SERVICE_HOST}:${KAFKA_ZOOKEEPER_SERVICE_PORT}'
                limits:
                  memory: 2048Mi
                  cpu: 500m
                readinessProbeDelay: 180
                livenessProbeDelay: 120
```

## <a id='next-installing-scdf'></a> Next: Installing SCDF for Kubernetes

Proceed to the [Installing SCDF for Kubernetes](installing-scdf-for-kubernetes.html) topic for installation instructions.
