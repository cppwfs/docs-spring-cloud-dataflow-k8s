---
title: Relocating Spring Cloud Stream and Task Applications
owner: Spring Cloud Data Flow Release Engineering
---

This topic describes how to relocate select Spring Cloud Stream and Spring Cloud Task applications for use with Spring Cloud Data Flow for Kubernetes (SCDF for Kubernetes).
This can be useful if the SCDF for Kubernetes server is deployed in an environment without internet access (an "air-gapped" environment).

The following sections demonstrate the relocation process using three stream applications: the `http` source application, the `split` processor application, and the `log` sink application.

<p class="note"><strong>Important</strong>: You must configure SCDF for Kubernetes with credentials for accessing the registry that will store the relocated images. See <a href="./configuring-installation-values.html#container-registry">Container Registry</a> and <a href="./configuring-installation-values.html#imagePullSecrets">Application ImagePullSecrets</a>.</p>

## <a id='install-irel'></a> Install Image Relocation Tool

Image relocation for an air-gapped environment requires an Open Container Initiative (OCI) image layout.
The following examples the `irel` command line utility to create this layout.

You can find the latest `irel` release from the [pivotal/image-relocation](https://github.com/pivotal/image-relocation/releases) repository on GitHub.
Download the appropriate download for your operating system, extract the archive file, and move the program file to a directory that is on your `PATH`.

## <a id='create-layout'></a> Create OCI Image Layout

Before creating an OCI image layout for the application images, you must select the versions to relocate.
In the following examples, we use the latest available images for the selected applications (based on the content of the "Stream Apps (RabbitMQ/Docker)" property file).

We will relocate the following application images:

```
source.http=docker:springcloudstream/http-source-rabbit:2.1.4.RELEASE

processor.splitter=docker:springcloudstream/splitter-processor-rabbit:2.1.3.RELEASE

sink.log=docker:springcloudstream/log-sink-rabbit:2.1.4.RELEASE
```

Add each image to the OCI image layout.

For the `http` source application image, run the following command:

```
$ irel layout add ./apps springcloudstream/http-source-rabbit:2.1.4.RELEASE
```

For the `splitter` processor application image, run the following command:

```
$ irel layout add ./apps springcloudstream/splitter-processor-rabbit:2.1.3.RELEASE
```

For the `log` sink application image, run the following command:

```
$ irel layout add ./apps springcloudstream/log-sink-rabbit:2.1.4.RELEASE
```

The image relocation also requires an image digest for each image.

To record the digest for each of the three images, run the following commands:

```
$ irel digest springcloudstream/http-source-rabbit:2.1.4.RELEASE
sha256:13ba48d79c54f86efc1f0ed4d3043490d83b4c8da6908eaefbce1fa1c69c8dad

$ irel digest springcloudstream/splitter-processor-rabbit:2.1.3.RELEASE
sha256:a00ea5669f604804daaa0e63514a974bdd7a9c80141ce3e2cc8eb97f6ce2526e

$ irel digest springcloudstream/log-sink-rabbit:2.1.4.RELEASE
sha256:45ffe67c5541e5fd234b488c499a77418e3c9244370898e49a8506ff7b246172
```

## <a id='create-apps-archive'></a> Create Image Archive File

After completing the OCI image layout, create an image archive file that can be moved into the air-gapped environment.

To create the archive file, run the following command:

```
$ tar cvf apps-oci-layout.tar ./apps
```

## <a id='push-images'></a> Push Applications to Registry

Extract the OCI layout archive file:

```
$ tar xvf apps-oci-layout.tar
```

Set a `TARGET_REPOSITORY_PREFIX` environment variable containing the prefix to use for the target registry and account or project:

```
$ export TARGET_REPOSITORY_PREFIX=registry.example.com/my-project/apps
```

Now use the recorded image digests to push the images to the target registry.

For the `http` source application image, run the following command:

```
$ irel layout push ./apps \
  'sha256:13ba48d79c54f86efc1f0ed4d3043490d83b4c8da6908eaefbce1fa1c69c8dad' \
  ${TARGET_REPOSITORY_PREFIX}/http-source-rabbit:2.1.4.RELEASE
```

For the `splitter` processor application image, run the following command:

```
$ irel layout push ./apps \
  'sha256:a00ea5669f604804daaa0e63514a974bdd7a9c80141ce3e2cc8eb97f6ce2526e' \
  ${TARGET_REPOSITORY_PREFIX}/splitter-processor-rabbit:2.1.3.RELEASE
```

For the `log` sink application image, run the following command:

```
$ irel layout push ./apps \
  'sha256:45ffe67c5541e5fd234b488c499a77418e3c9244370898e49a8506ff7b246172' \
  ${TARGET_REPOSITORY_PREFIX}/log-sink-rabbit:2.1.4.RELEASE
```

## <a id='register-stream-apps'></a> Register Relocated Applications

Finally, you can register the applications with SCDF for Kubernetes, using the the Spring Cloud Data Flow shell.
For information about connecting to the SCDF for Kubernetes server using the shell, see [Connecting to Spring Cloud Data Flow for Kubernetes](connecting-scdf-for-kubernetes.html).

In the following example commands, replace the `registry.example.com/my-project/apps` prefix with the prefix that you used when relocating the images.

For the `http` source application image, run the following command:

```
dataflow:>app register --name http --type source --uri docker:registry.example.com/my-project/apps/http-source-rabbit:2.1.4.RELEASE
```

For the `splitter` processor application image, run the following command:

```
dataflow:>app register --name splitter --type processor --uri docker:registry.example.com/my-project/apps/splitter-processor-rabbit:2.1.3.RELEASE
```

For the `log` sink application image, run the following command:

```
dataflow:>app register --name log --type sink --uri docker:registry.example.com/my-project/apps/log-sink-rabbit:2.1.4.RELEASE
```

For more details, see the [Register a Stream Application](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#spring-cloud-dataflow-register-stream-apps) section of the [Spring Cloud Data Flow Reference Guide](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/).

## <a id='relocate-task-apps'></a> Relocate Task Applications

To relocate Spring Cloud Task applications and use them with SCDF for Kubernetes, you can perform the steps described in the previous sections, but registering the applications with the type `task`.
For more information, see the [Registering a Task Application](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#spring-cloud-dataflow-register-task-apps) section of the [Spring Cloud Data Flow Reference Guide](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/).
