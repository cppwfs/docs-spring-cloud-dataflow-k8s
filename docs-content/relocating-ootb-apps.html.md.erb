---
title: Relocating Spring Cloud Stream and Task Applications
owner: Spring Cloud Data Flow Release Engineering
---

This topic describes how to relocate select Spring Cloud Stream and Spring Cloud Task applications.
This can be useful when the Spring Cloud Data Flow for Kubernetes server is deployed in an air-gapped environment.

To use as examples for this topic, we have selected three stream applications: the `http` source app, the `split` processor app and the `log` sink app.

<div class="note">Before you can use the relocated images with Spring Cloud Data Flow for Kubernetes, you would need to configure access to the registry where you relocate the images to.</div>

Review the following configuration sections: configuring the [Container Registry](configuring-installation-values.html#container-registry), and configuring [ImagePullSecrets for Apps](configuring-installation-values.html#imagePullSecrets)

## <a id='install-prel'></a> Install Image Relocation CLI utility

In order to relocate images we need a utility program that can help us create an OCI image layout that can be moved to an air-gapped environment.

For this topic we will be using a CLI utility called `prel` that is available from the `pivotal/scdf-k8s-prel` project.

Download the latest `prel` CLI utility release from the <a href="https://github.com/pivotal/scdf-k8s-prel/releases">project release page</a>.
Select the download that matches your operating system, extract the archive and move the program file to a location on your PATH.

## <a id='create-layout'></a> Create an Image Archive File containing the OCI Image Layout for Selected Applications

Before we create an OCI image layout for the three selected app images we need to select the versions we should relocate.
We will use the latest available images for the selected apps based on the content of the <a href="https://dataflow.spring.io/rabbitmq-docker-latest">Stream Apps (RabbitMQ/Docker)</a> property file.

The images we will relocate are added to a new `rabbitmq-docker-example.properties` file:

```
source.http=docker:springcloudstream/http-source-rabbit:2.1.4.RELEASE
processor.splitter=docker:springcloudstream/splitter-processor-rabbit:2.1.3.RELEASE
sink.log=docker:springcloudstream/log-sink-rabbit:2.1.4.RELEASE
```

Next, we package the properties file and referenced images in a `.tgz` zipped archive.

```bash
prel package --file rabbitmq-docker-example.properties \
  --archive rabbitmq-docker-example.tgz
```

This creates an archive containing the OCI image layout that can be moved to an air-gapped environment.

## <a id='push-images'></a> Push Selected Applications to a Registry

We are now ready to push the images to a new registry.

First, define an environment variable for the registry prefix (substitute with the prefix to use for your target registry ):

```bash
export TARGET_REPOSITORY_PREFIX=registry.example.com/my-project/apps
```

Next, relocate the images in the archive containing the OCI image layout.
This will genetate a new `rabbitmq-docker-example-relocated.properties` file that can be used to import these applications using the relocated images.

```bash
prel relocate --repository-prefix $TARGET_REPOSITORY_PREFIX \
  --archive rabbitmq-docker-example.tgz \
  --output rabbitmq-docker-example-relocated.properties 
```

## <a id='register-stream-apps'></a> Register the Relocated Applications

We can now register the apps using the the Spring Cloud Data Flow Shell.
See the [Connecting to SCDF for Kubernetes](connecting-scdf-for-kubernetes.html) topic for connection instructions.

```bash
dataflow:>app import --uri file:rabbitmq-docker-example-relocated.properties
```

See the [Register a Stream App](https://docs.spring.io/spring-cloud-dataflow/docs/2.6.0/reference/htmlsingle/#spring-cloud-dataflow-register-stream-apps) page for more detail.

## <a id='relocate-task-apps'></a> Relocating Task Applications

You can perform the same relocation steps with Spring Cloud Task apps and register them as type `task`.
See the [Registering a Task Application](https://docs.spring.io/spring-cloud-dataflow/docs/2.6.0/reference/htmlsingle/#spring-cloud-dataflow-register-task-apps) for more details.
